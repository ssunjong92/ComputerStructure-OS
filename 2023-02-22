교착상태 - 프로세스가 상대방이 가진 자원을 기다리기만 하다가 실행을 못하는 상황(일어나지 않을 사건을 무한히 기다리는 현상)
해결방법
 - 교착 상태의 상황을 정확히 표현
 - 근본적인 이유

자원 할당 그래프 - 어떤 프로세스가 어떤 자원을 사용하고 있고 어떤 프로세스가 어떤 자원을 기다리고 있는지 표현하는 그래프(교착상태라면 원의 형태)

발생 조건??
 - 상호 배제, 점유와 대기, 비선점, 원형 대기
상호배제 : 해당 자원을 한번에 하나의 프로세스만 이용 가능했기에...
점유와 대기 : 자원을 할당받은 상태에서 다른 자원을 할당받기를 기다리는 상태
비선점 : 자원을 이용하는 프로세스의 작업이 끝나야만 이용할 수 있음.. 강제로 뺏을 수 없다.
원형 대기 : 프로세스들과 프로세스가 요청 및 할당받은 자원이 원의 형태를 이루고 있음

교착상태 해결방법 - 예방, 회피, 검출 후 회복
예방!
상호배제를 없애면? 모든 자원을 공유 가능하게 만든다... 이론적으로는 되지만 현실적으로는 어렵다.
점유와 대기를 없애면? 자원을 동시에 사용하거나 그렇지 않으면 아예 점유할 수 없다. 자원의 활용률이 낮아질 수 있다. 한쪽에 몰아주면 오랫동안 할당되는 자원을 다수 양성한다.
                    또 많은 자원을 이용하는 프로세스에 불리해진다... 기아현상의 우려
비선점 조건을 없애면? 자원을 이용중인 프로세스로부터 자원을 빼앗아 사용... CPU 프로세스에는 적합하지만 프린터같이 자원을 뺏을 수 없을때는 범용성이 떨어짐...
원형 대기를 없애면? 모든 자원에 번호를 붙이고 오름차순으로 자원을 할당... 비교적 현실적이지만 모든 자원에 번호를 붙이는 일은 어렵다. 어떤 자원에 어떤 번호를 붙이는지에 따라 특정 자원의
                  활용률이 떨어질 수 있음

회피! - 교착상태를 한정된 자원의 무분별한 할당으로 인해 발생하는 문제로 간주.... 자원이 많다면 괜찮지만 자원이 한정적이므로 생긴다...
안전 상태 - 교착 상태가 발생하지 않고 모든 프로세스가 정상적으로 자원을 할당받고 종료될 수 있는 상태
불안전 상태 - 교착 상태가 발생할 수도 있는 상태
안전 순서열 - 교착상태 없이 안전하게 프로세스들에 자원을 할당할 수 있는 순서
즉 항상 안전 상태를 유지하도록 자원을 할당하는 방식

검출 후 회복! 교착상태를 인정하고 사후 조치하는 방식. 주기적으로 교착상태인지 확인
선점을 통한 회복 - 교착 상태가 해결할때 까지 한 프로세스에 자원을 몰아주는 방식
프로세스 강제 종료를 통한 회복 - 단순하고 확실..
 - 모두 강제종료 : 한방에 해결가능하지만 많은 프로세스들이 작업 내용을 잃을 수 있다.
 - 교착 상태가 없어질 때까지 한 프로세스 씩 종료 : 교착 상태가 없어졌는지 여부를 확인하는 과정에서 오버헤드를 야기

타조 알고리즘 : 아예 교착상태를 무시해버림
