명령어를 처리하는 정형화된 과정 - 명령어 싸이클
이 흐름이 끊어지는 현상?? 인터럽트

인출 싸이클 : 메모리에서 cpu로 명령어를 가지고 오는 단계
실행 싸이클 : 가져온 명령어를 실행하는 단계. 제어장치가 명령어 레지스터에 담긴 명령어를 해석하고 제어 신호를 발생시키는 단계
간접 싸이클 : 인출 싸이클을 돌았다고 해도 메모리에 한번 더 접근 해야하는 단계. 바로 실행 싸이클로 돌입할 수 없음
인터럽트 : CPU의 작업을 방해하는 신호. CPU가 주목해야할 때, 얼른 처리해야하는 다른 작업이 발생했을 때
동기 인터럽트와 비동기 인터럽트

동기 인터럽트는 CPU에 의해 발생하는 인터럽트. == 예외. CPU가 명령어를 수행하다가 예상치 못한 상황에 마주쳤을 때. ex)프로그래밍상의 오류.
비동기 인터럽트는 주로 입/출력 장치에 의해 발생. 알림 역할. ex) 프린트 완료 알람, 키보드.마우스에 알람 == 하드웨어 인터럽트

효율적으로 명령어를 처리하기 위해 하드웨어 인터럽트를 사용. 예를 들어 하드웨어 장치는 CPU에 비해 현저히 속도가 느리기 때문에 결과물을 바로 받아볼 수 없음
그래서 주기적으로 완료 여부를 확인해야 하는데 하드웨어 인터럽트를 이용하면 주기적으로 확인할 필요가 없고 완료 인터럽트를 받을 때 까지 다른 작업을 할 수 있다.

입출력장치는 CPU에 인터럽트 요청 신호를 보냄. CPU는 실행 사이클이 끝나고 명령어를 인출하기 전 항상 인터럽트 여부를 확인
CPU는 인터럽트 요청을 확인하고 인터럽트 플래그를 통해 현재 인터럽트를 받아드릴 수 있는지 확인
인터럽트를 받아 드릴 수 있다면 현재까지의 작업 백업.
CPU는 인터럽트 백터를 참조하여 인터럽트 서비스 루틴을 실행
인터럽트 서비스 루틴 실행이 끝나면 백업해 둔 작업을 복구하여 실행을 재개

인터럽트 요청 신호...
인터럽트 플래그. 플래그 레지스터에 저장되어 있으며 인터럽트를 받아드릴 지 무시할지 결정하는 플래그
인터럽트 서비스 루틴 == 인터럽트 핸들러 - 인터럽트가 발생했을 때 해당 인터럽트를 어떻게 처리하고 작동해야 할지에 대한 정보로 이루어진 프로그램
인터럽트 벡터 - 인터럽트 서비스 루틴을 식별하기 위한 정보. 인터럽트 서비스 루틴의 시작 주소를 알 수 있다.

CPU는 인터럽트 서비스 루틴을 실행하기 전 PC값 등 현재 프로그램을 재개하기 위해 필요한 모든 내용을 스택에 백업.

즉 인출, 실행, 간접, 인터럽트 사이클로 명령어 사이클이 구성
