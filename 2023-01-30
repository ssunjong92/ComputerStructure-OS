주기억장치에는 RAM, ROM. RAM에는 (DRAM, SRAM, SDRAM, DDR SDRAM)
RAM에는 실행할 프로그램의 명령어와 데이터가 저장 - 컴퓨터가 꺼지면 데이터가 모두 날라가는 휘발성 저장 장치
CPU는 보조기억장치에 직접 접근할 수 없음. 따라서 RAM으로 복사하여 저장한뒤 사용
RAM용량이 크면 많은 프로그램을 동시에 빠르게 실행하는데 유리

DRAM : Dyanamic RAM - 저장된 데이터가 동적으로 변하는 RAM. 시간이 지나면 저장된 데이터가 점차 사라지는 RAM. 데이터의 소멸을 막기 위해 주기적으로 재활성화 해야 함.
                      일반적으로 많이 사용. 소비전력이 낮고, 저렴, 집적도가 높기 때문에 대용량 설계가 가능.
                      
SRAM : Static RAM - 저장된 데이터가 변하지 않는 RAM. 일반적으로 속도가 빠름. 집적도 낮고 소비 전력 크며 가격 비쌈.
                    따라서 대용량으로 만들어질 필요는 없지만 빨라야하는 경우... 캐시 메모리...
                   
SDRAM : Synchronous Dynamic RAM - 클럭 신호와 동기화된 발전된 형태의 DRAM. 클럭 타이밍에 맞춰 CPU와 정보를 주고 받을 수 있음. 

DDR SDRAM : Double Data Rate SDRAM - 최근 많이 사용되는 RAM. 대역폭을 넓혀 속도를 빠르게 만든 SDRAM. 대역폭이란 데이터를 주고 받는 길의 너비


주소의 물리주소와 논리주소...
물리주소 : 메모리 하드웨어가 사용... 논리주소 : CPU와 실행중인 프로그램이 사용하는 주소
물리주소 : 정보가 실제로 저장된 메모리 하드웨어상의 주소... 논리주소 : 실행 중인 프로그램 각각에 부여된 0번지부터 시작하는 주소

CPU와 메모리는 서로 다른 주소체계를 가지고 있으니 주소 변환이 필요하다..
이는 메모리 관리 장치라는 하드웨어에서 수행.. CPU가 발생시킨 논리주소에 베이스 레지스터 값을 더하여 논리주소를 물리주소로 변환
베이스 레지스터에는 프로그램의 첫 물리주소를 저장. 논리주소는 프로그램의 시작점으로부터 떨어진 지점

메모리 보호 기법 : 다른 프로그램의 영역 을 침범하는 명령어는 위험하기에 논리 주소 범위를 벗어나는 명령어 실행을 방지하고 보호... 한계 레지스터에서 담당
한계 레지스터에는 프로그램 논리 주소의 최대 크기를 저장.
만약 한계 레지스터보다 높은 논리 주소에 접근하려 하면 인터럽트 발생...

캐시메모리 - CPU가 메모리에 접근하는 시간은 CPU 연산 속도보다 느림... 따라서 자주 메모리에 접근하면 안됨 그래서 캐시 메모리 등장
일반적으로 CPU와 가까이 있으면 빠르고 멀리 있으면 느리다... 빠르면 용량이 작고 느리면 용량이 크다...

캐시메모리는 CPU와 메모리 사이에 위치하고, 레지스터보단 느리고 메모리보다 빠른 SRAM 기반의 저장장치이다. CPU연산속도와 메모리 접근 속도의 차이를 줄이기 위해 탄생
(레지스터 - 캐시메모리 - 메모리 - 보조기억장치)
코어와 가장 가까운 캐시 메모리를 L1 캐시, L2 캐시(이 두개는 일반적으로 내부), L3 캐시(일반적으로 코어 외부)

분리형 캐시 : L1을 명령어만 저장하는 L1l 캐시와 데이터만 저장하는 L1D 캐시로 분리하는 경우

참조 지역성 원리 : CPU가 사용할만한 대상을 예측해서 저장... 예측한 데이터가 들어맞아 실제로 CPU에서 사용하는 경우 == 캐시 히트! <-> 캐시 미스
CPU가 메모리에 접근할 때 주된 경향을 바탕으로 만들어진 원리
 - 최근에 접근한 메모리 공간에 다시 접근하려는 경향 (시간 지역성 원리)
 - 접근한 메모리 공간 근처를 접근하려는 경향 (공간 지역성 원리)
 
저장 장치 계층구조 : 각기 다른 용량과 성능들의 저장 장치들을 계층화하여 표현




