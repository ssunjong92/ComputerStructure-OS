비트 : 0,1을 나타내는 가장 작은 단위(Byte, KB, GB, TB)
워드 : CPU가 한번에 처리할 수 있는 데이터 크기(하프워드, 풀워드, 더블워드)

이진법(모든 수를 0,1로 표현)
2의 보수. 어떤 수를 그보다 큰 2의n승에서 뺀 값... 모든 이진수의 0과 1을 뒤집은 값 = 1의 보수. 여기에 1을더한 값 = 2의 보수... 컴퓨터는 음수로 인식
양수인지 음수인지 구분하기 위해 '플래그' 사용
2의 보수의 한계 : 0과 2의n승의 음수값을 얻을 수 없다.

16진법(15가 넘어가는 시점에서 올림)... 2진수와 변환이 쉬움

문자집합 : 컴퓨터가 인식하고 표현할 수 있는 문자의 모음. 컴퓨터는 이를 바로 이해할 수 없어 0,1로 변환... 이를 인코딩 <-> 디코딩 : 0,1로 표현된 문자를 사람이 읽을 수 있는 문자로 변환

아스키코드 : 초창기 문자 집합 중 하나. 알파벳, 숫자, 일부 특수문자를 포함.. 7비트로 표현(128개) - 사실 8비트 사용이지만 1비트는 패리티 비트라고 오류 검출을 위해 사용...
장점 : 매우 간단하게 인코딩됨...
단점 : 한글을 표현할 수 없음... 아스키 이외의 문자, 특수문자도 표현 못함... 확장 아스키도 8비트라 턱없이 모자람...

한국을 포함한 영어권 외 나라들은 자신들의 언어를 0,1로 표현할 수 있는 고유한 문자 집합과 인코딩 방식이 필요... 한국 인코딩 방식 = EUC-KR
EUC-KR : 완성형 인코딩... 2바이트 크기... 다 표현할 수 없어 한글 깨짐 같은 문제 유발... CP949 등장. 넉넉치 않음

유니코드와 UTF-8 : 모든 언어를 아우르는 문자 집합과 통일된 표준 인코딩 방식(언어별로 인코딩하는 수고로움을 덜어줌) 가장 많이 사용중, 중요한 문자 인코딩 역할
