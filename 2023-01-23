고급언어 : 사람이 이해하고 작성하기 쉽게 만들어진 언어. 대부분의 프로그래밍 언어
저급언어 : 컴퓨터가 직접 이해하고 실행할 수 있는 언어... 명령어(기계어, 어셈블리어)
기계어 - 0,1의 명령어 비트로 이루어진 언어
어셈블리어 - 0,1로 이루어진 기계어를 읽기 쉽게 번역한 저급 언어

고급언어의 필요성 - 사람이 읽고 쓰기 편함, 더 나은 가독성, 변수나 함수같은 편리한 문법 제공 - 복잡한 프로그램도 구현 가능
고급언어 -> 저급언어 가는 방법
컴파일 언어 - 컴파일 방식으로 작동하는 프로그래밍 언어
인터프리트 언어 - 인터프리터 방식으로 작동하는 프로그래밍 언어

컴파일 언어 : 컴파일러에 의해 소스코드 전체가 저급언어로 변환되어 실행되는 고급언어(C)
컴파일 : 소스코드 전체가 적브언어로 변환되는 과정
컴파일러 : 컴파일을 도와주는 도구
이때 컴파일러가 소스 코드 내에서 오류를 하나라도 발견하면 해당 소스 코드는 컴파일에 실패
컴파일러를 통해 저급언어로 변환된 코드를 '목적 코드'라고 한다.

인터프리터 언어는 인터프리터에 의해 소스 코드가 한줄씩 실행되는 고급 언어(python)
소스코드를 한줄씩 차례로 실행... 이를 도와주는 도구를 인터프리터... 전체를 저급언어로 변환할 시간을 기다릴 필요가 없다.
N번째에 오류가 있더라도 N-1번째 까지는 올바르게 수행


목적파일 -> 실행파일 : 목적 파일은 목적 코드로 이루어진 파일. 목적 코드는 프로그래밍으로 구현된 코드가 저급언어로 변환된 파일일 뿐.
                      따라서 '링킹'이라는 작업을 통해 외부 기능들(출력, 내부 함수)을 연결 지어줘야 하나의 실행 파일이 된다.


명령어 : 연산 코드와 오퍼랜드로 구성..
연산 코드(연산자) - 명령어가 수행할 연산
오퍼랜드(피연산자) - 연산에 사용할 데이터 또는 연산에 사용할 데이터가 저장된 위치
연산 코드가 담긴 영역을 연산코드 필드, 오퍼랜드가 담긴 영역을 오퍼랜드 필드

오퍼랜드에는 데이터나 데이터가 저장된 위치... 데이터를 직접 명시하기 보단 메모리 주소나 레지스터 이름이 담김. 주소 필드라고 부르기도 함.
오퍼랜드 없음 - 0-주소 명령어. 한개 - 1주소 명령어...

연산코드 - 명령어가 수행할 연산... 데이터 전송, 산술/논리 연산, 제어 흐름 변경, 입출력 제어

주소 지정 방식: 연산의 대상이 되는 데이터(유효 주소)를 찾는 방법... 왜? 명령어 길이 때문.. 실제 데이터를 입력하면 표현할 수 있는 정보의 가짓수가 작지만
                                                                                     주소로 하면 메모리 주소에 저장할 수 있는 공간만큼 표현할 수 있다.

즉시 주소 지정방식 : 데이터를 오퍼랜드 필드에 직접 명시
직접 주소 지정방식 : 오퍼랜드 필드에 유효 주소를 직접 명시
간접 주소 지정방식 : 유효 주소의 주소를 오퍼랜드 필드에 명시
레지스터 주소 지정 방식 : 데이터를 저장한 레지스터를 오퍼랜드 필드에 직접 명시
레지스터 간접 주소 지정 방식 : 데이터를 저장한 메모리의 주소를 저장한 레지스터를 오퍼랜드 필드에 명시

스택 : 한쪽끝이 막혀있는 저장공간. 나중에 저장한 데이터를 가장 먼저 빼내는 데이터 관리(후입선출) LIFO
PUSH-저장, POP-데이터 꺼냄

큐 : 양쪽이 뚫려 있는 저장 공간. 가장 먼저 저장된 데이터를 가장 먼저 빼냄. FIFO




